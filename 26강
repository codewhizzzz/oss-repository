#최신 커밋 메시지 수정
-기본 편집기 설정 설정 방법
$ git config -- global core.editor'code -- wait
- 설정된 편집기로 최근 커밋 메시지 수정
$ git commit --amend
새로운 커밋 ID로 수정됨
-최근 커밋 메시지를 직접 입력해 수정
$ git commit -- amend - m "an updated commit message"
새로운 커밋 ID로 수정됨

#HEAD의 내용 수정
-새로운 파일을 추가하거나 파일을 수정한 후
-새로운 커밋으로 생성하지 않고
-최신 커밋에 반영
새로운 커밋 ID로 수정됨
#커밋 옵션 -- amend 사용
-기본 편집기로 메시지 편집
$git commit --amend
-명령어 상에 직접 메시지 입력
$ git commit --amend - m 'new message'
-메시지 수정 없이 다시 커밋 수정
$ git commit -- amend -- no -edit

#rebase의 --interactive를 사용
-작업공간이 깨끗한 이후, 이전 여러 개의 커밋을 수정
이전 커밋을 다시 작성한 경우 새 ID가 부여
-rebase의 --interactive HEAD~3
HEAD~3 : 수정할 커밋의 직전 커밋
시제 HEAD~2부터 수정 가능

#rebase의 --interactive HEAD ~3 주요 명령어
-기본 편집기로 열리며, HEAD ~3이면 HAED~2, HEAD ~1, HEAD 3개의 행을 편집 가능
-로그 결과의 다르게 오래된 커밋부터 표시


