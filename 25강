# 3-way 상태에서 base의 이해
                            
a ----> b ---->  c  ----->  D:master 
        |======> X =======> Y:bugfix 
-커밋 b
현재 master와 bugfix의 공통 조상
=>이를 base라 칭함
-rebase만 하면 다음 그림처럼'master'의 위치는 그대로 유지
$git rebase master
a ----> b ---->  c  ----->  D : master------> x' ---------> Y':bugfix
-마스터 브랜치의 위치를 변경하기 위해서는
master 브랜치에서 bugfix 브랜치를 fast-forward(빨리 감기) 병합 필요
$git merge bugfix
a ----> b ---->  c  ----->  D ------> x' ---------> Y':master, bugfix

-이동되는 x와 y의 내용이'master'의 c, D커밋들과 충돌하는 부분이 생길 수 있음
각각의 커밋에서 발생한 충돌 내용을 수정후, 추가, 계속 수행이 필요
-충돌 발생 후 해결 절차
1. 파일 수정
2. 파일 추가
$ git add <수정파일>
3.rebase 계속 수행, 마지막 메시지 수정
$ git rebase -- continue
a ----> b ---->  c  ----->  D : master------> x' ---------> Y':bugfix
a ----> b ---->  c  ----->  D ------> x' ---------> Y':master, bugfix
merge vs rebase비교
#merge : 여러 분기가 생긴 변경 내용의 이력이 모두 그대로 남아 있기 때문에 이력이 복잡해짐
#rebase : 히스토리가 선형으로 단순해지고 좀 더 깨끗한 이력을 남김,
          원래의 커밋 이력이 변경됨(정확한 이력을 남겨야 할 필요가 있을 경우에는 사용하면 x)
fast-forward merge vs rebase 비교
-fast-forward merge
조상에 위치한 브랜치에서 선행 브랜치의 마지막으로 이동하여 병합
-rebase
두 갈래의 브랜치에서 기존의 베이스를 수정
=> 병합할 브랜치 마지막 커밋을 새로운 베이스로 수정하는 병

#일반적 rebase 방법
-topic에서 main을 rebase 한 이후, 다시 mainㅇ로 이동 fast-forward 병합 수행
  $ git checkout topic
  $ git rebase main
  $ git checkout main
  $ git merge topic
# 다른 rebase 방법 : 어느 브랜치든 main topic 순서로 재배치 방법
  $ git rebase main topic
  $ git checkout main
  $ git merge topic
